# -*- coding: utf-8 -*-
"""Hike Task

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19D92MajVyqszWHZhddtLuFWkbWMxrAZM
"""

# import the necessary packages
from imutils import face_utils
import numpy as np
import argparse
import imutils
import dlib
import cv2
import pandas as pd
from collections import OrderedDict
from google.colab.patches import cv2_imshow

# initialize dlib's face detector (HOG-based) and then create
# the facial landmark predictor
detector = dlib.get_frontal_face_detector()
predictor = dlib.shape_predictor('/.../shape_predictor_68_face_landmarks.dat') #Dat file
image_path = '/.../.jpg' # Path of Image

# load the input image, resize it, and convert it to grayscale
image = cv2.imread(image_path)
image = imutils.resize(image, width=500)
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

picture = image.copy() # Creating a copy for further use in feature extraction

# detect faces in the grayscale image
rects = detector(gray, 1)

# loop over the face detections
for (i, rect) in enumerate(rects):
	# determine the facial landmarks for the face region, then
	# convert the facial landmark (x, y)-coordinates to a NumPy
	# array
	shape = predictor(gray, rect)
	shape = face_utils.shape_to_np(shape)

	# convert dlib's rectangle to a OpenCV-style bounding box
	# [i.e., (x, y, w, h)], then draw the face bounding box
	(x, y, w, h) = face_utils.rect_to_bb(rect)
	cv2.rectangle(image, (x, y), (x + w, y + h), (0, 255, 0), 2)

	# show the face number
	cv2.putText(image, "Face #{}".format(i + 1), (x - 10, y - 10),
		cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)

	# loop over the (x, y)-coordinates for the facial landmarks
	# and draw them on the image
	for (x, y) in shape:
		cv2.circle(image, (x, y), 2, (0, 0, 255), -1)

# show the output image with the face detections + facial landmarks
cv2.imshow('Output', image)
cv2.waitKey(0)

# Save the array of landmark coordinates as Csv file
file = pd.DataFrame(shape)
file.to_csv('face_landmarks',index=False)

#Index of Various Face features and corresponding array value
FACIAL_LANDMARKS_IDXS = OrderedDict([
	("mouth", (48, 68)),
	("inner_mouth", (60, 68)),
	("right_eyebrow", (17, 22)),
	("left_eyebrow", (22, 27)),
	("right_eye", (36, 42)),
	("left_eye", (42, 48)),
	("nose", (27, 36)),
	("jaw", (0, 17))
])

def visualize_facial_landmark(picture, shape, name, colors=None, alpha=0.75):
  # name : take the input face feature as string value

	# create two copies of the input picture -- one for the
	# overlay and one for the final output picture
	overlay = picture.copy()
	output = picture.copy()

	# if the colors list is None, initialize it with a unique
	# color for each facial landmark region
	if colors is None:
		colors = [(19, 199, 109), (79, 76, 240), (230, 159, 23),
			(168, 100, 168), (158, 163, 32),
			(163, 38, 32), (180, 42, 220)]

	
	(j, k) = FACIAL_LANDMARKS_IDXS[name]
	pts = shape[j:k]

		# check if are supposed to draw the jawline
	if name == "jaw":
			# since the jawline is a non-enclosed facial region,
			# just draw lines between the (x, y)-coordinates
			for l in range(1, len(pts)):
				ptA = tuple(pts[l - 1])
				ptB = tuple(pts[l])
				cv2.line(overlay, ptA, ptB, colors[i], 2)

		# otherwise, compute the convex hull of the facial
		# landmark coordinates points and display it
	else:
			hull = cv2.convexHull(pts)
			cv2.drawContours(overlay, [hull], -1, colors[i], -1)

	# apply the transparent overlay
	cv2.addWeighted(overlay, alpha, output, 1 - alpha, 0, output)
	# return the output picture
	return cv2.imshow('Output', output)

#Calling the function to show Jaw line
visualize_facial_landmark(picture, shape, 'jaw', colors=None, alpha=0.75)
#cv2.imwrite('face_feature.jpg', picture)